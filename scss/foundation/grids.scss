/// Sets the element as a grid container. You should use this when a bespoke grid is necessary.
/// @group grid
///
/// @author David Johnson
/// @param {Number} $columns [12]
///     The number of columns to use.
/// @param {Length} $row-gap [0]
///     The gutter size between rows.
/// @param {Length} $column-gap [0]
///     The gutter size between columns.

@mixin grid-bespoke($columns: 12, $column-gap: 0, $row-gap: 0) {
  @if $columns == null {
    @error 'Grid requires columns';
  }
  display: grid;
  grid-gap: $row-gap $column-gap;
  grid-template-columns: repeat($columns, 1fr);
  grid-template-rows: auto;
}

/// Sets the element as a grid container for a specific breakpoint.
/// @group grid
///
/// @author David Johnson
/// @param {String} $breakpoint [xs]
///     The breakpoint to target.

@mixin grid($breakpoint: xs) {
  $grid: map-get($grids, $breakpoint);

  @if $grid == null {
    @error 'Grid `#{$breakpoint}` not found.';
  }
  display: grid;
  grid-gap: map-get($grid, row-gap) map-get($grid, column-gap);
  grid-template-columns: repeat(map-get($grid, columns), 1fr);
  grid-template-rows: auto;
}

/// Sets the element as a grid container without any gutters.
/// @group grid
///
/// @author David Johnson
/// @param {String} $breakpoint [xs]

@mixin grid-collapsed($breakpoint: xs) {
  $grid: map-get($grids, $breakpoint);

  @if $grid == null {
    @error 'Grid `#{$breakpoint}` not found.';
  }
  display: grid;
  grid-gap: 0;
  grid-template-columns: repeat(map-get($grid, columns), 1fr);
  grid-template-rows: auto;
}


/// Generates grids for all breakpoints.
/// @group grid
///
/// @author David Johnson

@mixin grids() {
  @each $breakpoint, $value in $grids {
    @include media-breakpoint-up($breakpoint) {
      $grid: map-get($grids, $breakpoint);
      display: grid;
      grid-gap: map-get($grid, row-gap) map-get($grid, column-gap);
      grid-template-columns: repeat(map-get($grid, columns), 1fr);
      grid-template-rows: auto;
    }
  }
}


/// Generates collapsed grids for all breakpoints.
/// @group grid
///
/// @author David Johnson

@mixin grids-collapsed() {
  @each $breakpoint, $value in $grids {
    @include media-breakpoint-up($breakpoint) {
      $grid: map-get($grids, $breakpoint);
      display: grid;
      grid-gap: 0;
      grid-template-columns: repeat(map-get($grid, columns), 1fr);
      grid-template-rows: auto;
    }
  }
}

/// Creates a grid column. This mixin can accept a column index, or a percentage.
/// The percentage value will be converted into an index value.
///
/// @group grid
///
/// @author David Johnson
/// @param {String} breakpoint [xs]
///     The breakpoint to target
/// @param {Number|Length(%)} $start
///     The index to start at OR the percentage to start at.
/// @param {Number|Length(%)} $end
///     The index to end at OR the percentage to end at. NOTE: This will always
///     be 1 more than expected (e.g. if you have 12 columns, and you want to
///     stop at the last column, you will need to set this parameter to 13)

@mixin grid-column($breakpoint: xs, $start: null, $end: null) {
  $grid: map-get($grids, $breakpoint);

  @if $grid == null {
    @error 'Grid `#{$breakpoint}` not found.';
  }

  $grid-columns: map-get($grid, columns);

  @if $start == null and $end == null {
    $start: 1;
    $end: $grid-columns+1;
  } @else if $start != null and $end == null {
    $end: $start;
    $start: 1;
  }

  @if unit($start) == '%' {
    $start: round($grid-columns * (strip-unit($start) / 100)) + 1;
  }

  @if unit($end) == '%' {
    $end: round($grid-columns * (strip-unit($end) / 100)) + 1;
  }

  @include media-breakpoint-up($breakpoint) {
    grid-column: unquote('#{$start} / #{$end}');
  }
}

/// Retrives the number of columns for a particular breakpoint.
///
/// @group grid
///
/// @author David Johnson
/// @param {String} breakpoint [xs]
///     The breakpoint to target
/// @return {Number} The number of columns.

@function get-grid-columns($breakpoint: xs) {
  $grid: map-get($grids, $breakpoint);

  @if $grid == null {
    @error 'Grid `#{$breakpoint}` not found.';
  }

  @return map-get($grid, columns);
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
