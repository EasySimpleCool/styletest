/// Sets the element as a grid container
/// @group grid
///
/// @author David Johnson
/// @param {Number} $columns [$grid-columns]
///     The number of columns to use.
/// @param {String} $row-gap [$grid-gap]
///     The gutter size between rows.
/// @param {String} $column-gap [$grid-gap]
///     The gutter size between columns.

@mixin grid($columns: $grid-columns, $row-gap: $grid-gap, $column-gap: $grid-gap) {
  display: grid;
  grid-gap: $row-gap $column-gap;
  grid-template-columns: repeat($columns, 1fr);
  grid-template-rows: auto;
}

/// Creates a grid column. This mixin can accept a column index, or a percentage.
/// The percentage value will be converted into an index value.
///
/// @group grid
///
/// @author David Johnson
/// @param {Number|Length(%)} $start
///     The index to start at OR the percentage to start at.
/// @param {Number|Length(%)} $end
///     The index to end at OR the percentage to end at. NOTE: This will always
///     be 1 more than expected (e.g. if you have 12 columns, and you want to
///     stop at the last column, you will need to set this parameter to 13)

@mixin grid-column($start: null, $end: null) {
  @if $start == null and $end == null {
    $start: 1;
    $end: $grid-columns+1;
  } @else if $start != null and $end == null {
    $end: $start;
    $start: 1;
  }

  @if unit($start) == '%' {
    $start: round($grid-columns * (strip-unit($start) / 100)) + 1;
  }

  @if unit($end) == '%' {
    $end: round($grid-columns * (strip-unit($end) / 100)) + 1;
  }
  grid-column: unquote('#{$start} / #{$end}');
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
